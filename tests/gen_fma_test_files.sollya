execute("../sollya_implementation/mixed_fma.sol");

procedure __name_file(fr,fx,fy,fz) {
  name="fma_";
  F = [|fr,fx,fy|];

  for f in F do { 
      if (f=="B") then {
	  name=name@"bin64_";
	} else {
	name=name@"dec64_";
      };
    };

  if (fz=="B") then {
      name=name@"bin64.testvector";
    } else {
      name=name@"dec64.testvector";
  };

  return name;
};

procedure __comment_test_file(filename,fr,fx,fy,fz) {
    write("// A test vector file for a fused-multiply-and-add operation res = x * y + z such that\n\n")>filename;

    if (fr=="B") then {
	write("// res is a binary64\n")>>filename;
      } else {
      write("// res is a decimal64\n")>>filename;
    };

    if (fx=="B") then {
	write("// x   is a binary64\n")>>filename;
      } else {
      write("// x   is a decimal64\n")>>filename;
    };

    if (fy=="B") then {
	write("// y   is a binary64\n")>>filename;
      } else {
      write("// y   is a decimal64\n")>>filename;
    };

    if (fz=="B") then {
	write("// z   is a binary64\n\n")>>filename;
      } else {
      write("// z   is a decimal64\n\n")>>filename;
    };

    write("// res   x   y   z   beforeFlags   expectedFlags   binaryRoundingMode   decimalRoundingMode\n")>>filename;
};

write("START GEN FILES\n");

Formats = [|"B","D"|];
RoundinModes = [|RU,RD,RN,RZ|];
ValuesB = [|0.0,1.0,-1.0,0.5,-0.5,17,-17,42.0,-42.0,2^1023,-2^1023,2^-1022,2^-1023,2^-1074,-2^-1022,-2^-1023,-2^-1074,0x1.999999999999ap-4,-0x1.999999999999ap-4,-0x1.999999999999ap-58,0x1.999999999999ap-58,0x1.8181818181818p-8,-0x1.8181818181818p-8,0x1.999999999999ap-60,-0x1.999999999999ap-60,0x1.921fb54442d18p1,-0x1.921fb54442d18p1,0x1.45f306dc9c883p-2,-0x1.45f306dc9c883p-2,0x1.ffff88fbfdebbp0,0x1.203af9ee75616p-87|];
ValuesD = [|0.0,1.0,-1.0,0.5,-0.5,42.0,-42.0,9*10^347,-9*10^347,10^-398,-10^-398,10^15,10^16 - 1,17,1664, -(3637978807091713 / 227373675443232059478759765625b41), -(999996453057029 / 500000000000000), -(-3183098861837907 / 10000000000000000), -(3183098861837907 / 10000000000000000), -(-3141592653589793 / 1000000000000000), -(3141592653589793 / 1000000000000000), -(-693889390390723 / 500000000000000000000000000000000), -(693889390390723 / 500000000000000000000000000000000), -(-5882352941176471 / 1000000000000000000), -(5882352941176471 / 1000000000000000000), -(5551115123125783 / 1000000000000000000000000000000000), -(-5551115123125783 / 1000000000000000000000000000000000), -(-1 / 10), -(1 / 10), -(-988131291682493 / 178591779887855465971216179422709524914360936691062290814863413004317599360427843074288753415651879632684852242714691911284459587856862304863444108345318944057111565215013322032571224953586254088379325910551642664358951151371002197265625b339), -(-1112536929253601 / 5852095443365247908944811767323345712393779173492729145421444317325479095842499561858293871924080791803817238289275024548969171774893664005765336542259411158863431768965556536363293899279114373968013751436956226825714111328125b323), -(-2225073858507201 / 5852095443365247908944811767323345712393779173492729145421444317325479095842499561858293871924080791803817238289275024548969171774893664005765336542259411158863431768965556536363293899279114373968013751436956226825714111328125b323), -(988131291682493 / 178591779887855465971216179422709524914360936691062290814863413004317599360427843074288753415651879632684852242714691911284459587856862304863444108345318944057111565215013322032571224953586254088379325910551642664358951151371002197265625b339), -(1112536929253601 / 5852095443365247908944811767323345712393779173492729145421444317325479095842499561858293871924080791803817238289275024548969171774893664005765336542259411158863431768965556536363293899279114373968013751436956226825714111328125b323), -(2225073858507201 / 5852095443365247908944811767323345712393779173492729145421444317325479095842499561858293871924080791803817238289275024548969171774893664005765336542259411158863431768965556536363293899279114373968013751436956226825714111328125b323), 2824013958708217641898057618645733912558056168428277632594173805843120351451156969820114765305947397522894243590427852961728754184637518367975707081055125190092380624617748383748359886080692149334936402738094329833984375b294, -2824013958708217641898057618645733912558056168428277632594173805843120351451156969820114765305947397522894243590427852961728754184637518367975707081055125190092380624617748383748359886080692149334936402738094329833984375b294 |];

/* Loops for the formats */
for fx in [| "B" |] do {
    for fy in [| "B" |] do {
	for fz in [| "B" |] do {
	    for fr in [| "D" |] do {
		if ((fr!=fz) || (fz!=fy) || (fy!=fx)) then {

		    /* Name of the test file */
		    filename=__name_file(fr,fx,fy,fz);
		    write("FILE: ",filename,"\n");
		    /* Comment the test file */
		    __comment_test_file(filename,fr,fx,fy,fz);

		    /* Loop for the rounding modes */
		    for rm in RoundinModes do {

			if (fx=="B") then {
			    ValuesX = ValuesB;
			  } else {
			    ValuesX = ValuesD;
			};

			if (fy=="B") then {
			    ValuesY = ValuesB;
			  } else {
			    ValuesY = ValuesD;
			};

			if (fz=="B") then {
			    ValuesZ = ValuesB;
			  } else {
			    ValuesZ = ValuesD;
			};
			
		    	/* Loops for the values */
			for x in ValuesX do {
			    write("X: ",x,"\n");
			    for y in ValuesY do {
				for z in ValuesZ do {
				    t=mixed_fma_as_string(x,y,z,rm,fx,fy,fz,fr);
				    write(t,"\n")>>filename;
				  };
			      };
			  };
		      };
		  };
	      };
	  };
      };
  };

t=mixed_fma_as_string(0.1D,10.25,-1.025D,"RU","D","B","D","B");

t=mixed_fma_as_string(0.1,0.1,1.0,"RN","D","B","D","B");
